@page "/"
@implements IDisposable

@inject IStringLocalizer<Resource> R
@inject Data.FileWatcherService fileWatcherService


@using System.Globalization
@using System.IO


<h1>@R["Greeting"]</h1>
<p>Current UI Culture: @CultureInfo.CurrentUICulture.NativeName </p>
<p>Please start by changing the language</p>
<p>Thread: @Environment.CurrentManagedThreadId</p>
<p>FileWatcherThread:  @fileWatcherService.Thread</p>
<p>FileWatcher UI Culture: @fileWatcherService.Culture</p>
<p>FileWatcher Current UI Culture: @fileWatcherService.CurrentUICulture</p>
<p>Events Current UI: @eventUICulture</p>

@if (string.IsNullOrEmpty(FileName))
{
    <p>Create or delete files on: <code>@Data.FileWatcherService.WATCHED_PATH </code> to see updates here.</p>
}
else
{
    <p>@FileName was @FileAction</p>
}

<br />
<br />

<p>The language on this page will change back to the language that was valid when the file watcher was instantiated on startup.</p>



@code{

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            fileWatcherService.FileWatcher.EnableRaisingEvents = true;
            fileWatcherService.FileWatcher.Created += OnCreated;
            fileWatcherService.FileWatcher.Deleted += OnDeleted;

        }
        base.OnAfterRender(firstRender);
    }

    string FileName = string.Empty;
    string FileAction;
    string eventUICulture;

    private void OnCreated(object sender, FileSystemEventArgs e)
    {
        FileAction = "created";
        FileName = e.Name;

        CultureInfo.CurrentUICulture = new CultureInfo("de");

        eventUICulture = CultureInfo.CurrentUICulture.IetfLanguageTag;


        InvokeAsync(() => StateHasChanged());
    }

    private void OnDeleted(object sender, FileSystemEventArgs e)
    {
        FileAction = "deleted";
        FileName = e.Name;

        eventUICulture = CultureInfo.CurrentUICulture.IetfLanguageTag;


        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        fileWatcherService.FileWatcher.Created -= OnCreated;
        fileWatcherService.FileWatcher.Deleted -= OnDeleted;
    }


}
