@page "/watcher"
@implements IDisposable

@inject IStringLocalizer<Resource> R
@inject Data.FileWatcherService fileWatcherService

@using System.Globalization
@using System.IO


<h1>@R["Greeting"]</h1>
<p>Language: @CultureInfo.CurrentUICulture.NativeName </p>
<p>Thread: @Environment.CurrentManagedThreadId</p>


@if (string.IsNullOrEmpty(FileName))
{
    <p>Create or delete files on: <code>@Data.FileWatcherService.WATCHED_PATH </code> to see updates here.</p>
}
else
{
    <p>@FileName was @FileAction</p>
}

<br />
<br />


<p>The language on this page will NOT change as the file watcher was instantiated from this page.</p>



@code{



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            fileWatcherService.SecondWatcher = new FileSystemWatcher(Data.FileWatcherService.WATCHED_PATH); // Wathcher instantiated on page
            fileWatcherService.SecondWatcher.EnableRaisingEvents = true;
            fileWatcherService.SecondWatcher.Created += OnCreated;
            fileWatcherService.SecondWatcher.Deleted += OnDeleted;
        }


        base.OnAfterRender(firstRender);
    }

    string FileName = string.Empty;
    string FileAction;

    private void OnCreated(object sender, FileSystemEventArgs e)
    {
        FileAction = "created";
        FileName = e.Name;

        InvokeAsync(() => StateHasChanged());
    }

    private void OnDeleted(object sender, FileSystemEventArgs e)
    {
        FileAction = "deleted";
        FileName = e.Name;

        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        fileWatcherService.SecondWatcher.Created -= OnCreated;
        fileWatcherService.SecondWatcher.Deleted -= OnDeleted;
    }


}
